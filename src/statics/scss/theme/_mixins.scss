@import "./variables";
@import "./functions";

// No need..
@mixin theme-core-styles() {
  :root {
      @each $style in map-keys($theme-property-values) {
        --theme-#{$style}: #{map-get($theme-property-values, $style)};
      }
  }
}

// Applies the correct theme color style to the specified property.
// $property is typically color or background-color, but can be any CSS property that accepts color values.
// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.
// $edgeOptOut controls whether to feature-detect around Edge to avoid emitting CSS variables for it,
// intended for use in cases where interactions with pseudo-element styles cause problems due to Edge bugs.
@mixin theme-prop-generate($property, $style, $theme-property-values, $important: false, $edgeOptOut: false) {
  @if theme-is-var-with-fallback_($style) {
    @if $important {
      #{$property}: theme-get-var-fallback_($style) !important;
      /* @alternate */
      #{$property}: theme-var_($style) !important;
    } @else {
      #{$property}: theme-get-var-fallback_($style);
      /* @alternate */
      #{$property}: theme-var_($style);
    }
  } @else if theme-is-valid-theme-prop-value_($style) {
    @if $important {
      #{$property}: $style !important;
    } @else {
      #{$property}: $style;
    }
  } @else {
    @if not map-has-key($theme-property-values, $style) {
      @error "Invalid style: '#{$style}'. Choose one of: #{map-keys($theme-property-values)}";
    }

    $value: map-get($theme-property-values, $style);  // Core logic

    @if $important {
      #{$property}: $value !important;

      @if $edgeOptOut {
        @at-root {
          // IE 11 doesn't understand this syntax and ignores the entire block.
          // Edge understands this syntax and skips the entire block to avoid a nasty :before/:after pseudo-element bug.
          // All other browsers apply the styles within the block.
          @supports not (-ms-ime-align: auto) {
            & {
              /* @alternate */
              #{$property}: var(--theme-#{$style}, $value) !important;
            }
          }
        }
      } @else {
        /* @alternate */
        #{$property}: var(--theme-#{$style}, $value) !important;
      }
    } @else {
      #{$property}: $value;

      @if $edgeOptOut {
        @at-root {
          // IE 11 doesn't understand this syntax and ignores the entire block.
          // Edge understands this syntax and skips the entire block to avoid a nasty :before/:after pseudo-element bug.
          // All other browsers apply the styles within the block.
          @supports not (-ms-ime-align: auto) {
            & {
              /* @alternate */
              #{$property}: var(--theme-#{$style}, $value);
            }
          }
        }
      } @else {
        /* @alternate */
        #{$property}: var(--theme-#{$style}, $value);
      }
    }
  }
}

@mixin theme-prop($property, $style, $important: false, $edgeOptOut: false) {
  @at-root{
    body[data-theme='light'] & {
      @include theme-prop-generate($property, $style, $theme-property-values, $important, $edgeOptOut)
    }
    body[data-theme='dark'] & {
      @include theme-prop-generate($property, $style, $theme-property-values-dark, $important, $edgeOptOut)
    }
  }
}
